use mock_sba_db;

-- 1. Create a query to return all orders made by users with the first name of “Marion” 
select o.* 
from orders as o
join users as u on u.USER_ID = o.USER_ID
where u.FIRST_NAME = 'Marion'
;

-- 2. Create a query to select all users that have not made an order 
select u.* 
from users as u
left join orders as o on u.USER_ID  = o.USER_ID 
where o.USER_ID is null
;

-- 3. Create a Query to select the names and prices of all items that have been part of 2 or more separate orders. 
select i.*
from order_items as oi
join items as i on oi.ITEM_ID = i.ITEM_ID 
group by i.ITEM_ID 
having count(oi.ORDER_ID) > 1
;

-- 4. Create a query to return the Order Id, Item name, Item Price, and Quantity from orders made at stores in the city “New York”. 
-- Order by Order Id in ascending order. 
select o.ORDER_ID as `Order Id`, i.NAME as `Item Name`, i.PRICE as `Item Price`, oi.QUANTITY as `Quantity`
from orders as o
join stores as s on o.STORE_ID = s.STORE_ID 
join order_items as oi on o.ORDER_ID = oi.ORDER_ID
join items as i on oi.ITEM_ID = i.ITEM_ID 
where s.CITY = 'New York'
order by `Order Id` asc
;

-- 5. Your boss would like you to create a query that calculates the total revenue generated by each item. 
-- Revenue for an item can be found as (Item Price * Total Quantity Ordered). 
-- Please return the first column as ‘ITEM_NAME’ and the second column as ‘REVENUE’. 
select i.name as `ITEM_NAME`, sum(i.PRICE*oi.QUANTITY) as `REVENUE`
from order_items as oi
join items as i on oi.ITEM_ID = i.ITEM_ID 
group by `ITEM_NAME`
order by `REVENUE` desc
;

-- 6. Create a query with the following output: 
	-- a. Column 1 - Store Name 
		-- i. The name of each store 
	-- b. Column 2 - Order Quantity 
		-- i. The number of times an order has been made in this store 
	-- c. Column 3 - Sales Figure 
		-- i. If the store has been involved in more than 3 orders, mark as ‘High’ 
		-- ii. If the store has been involved in less than 3 orders but more than 1 order, mark as ‘Medium’ 
		-- iii. If the store has been involved with 1 or less orders, mark as ‘Low’ 
	-- d. Should be ordered by the Order Quantity in Descending Order 

select s.NAME, COUNT(s.STORE_ID) as `ORDER_QUANTITY`,
(case 
when COUNT(s.STORE_ID) > 3 then 'High'
when COUNT(s.STORE_ID) <= 3 and COUNT(s.STORE_ID) > 1 then 'Medium'
when COUNT(s.STORE_ID) <= 1 then 'Low'
end) as `SALES_FIGURE`
from stores as s
join orders as o on s.STORE_ID = o.STORE_ID 
group by s.STORE_ID 
order by `ORDER_QUANTITY` desc
;




















	 
